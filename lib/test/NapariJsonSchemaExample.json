{
        "title": "NapariWorkflowsWrapper",
        "type": "object",
        "properties": {
          "input_paths": {
            "title": "Input Paths",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of input paths where the image data is stored as OME-Zarrs. Should point to the parent folder containing one or many OME-Zarr files, not the actual OME-Zarr file. Example: [\"/some/path/\"] This task only supports a single input path. (standard argument for Fractal tasks, managed by Fractal server)"
          },
          "output_path": {
            "title": "Output Path",
            "type": "string",
            "description": "This parameter is not used by this task (standard argument for Fractal tasks, managed by Fractal server)"
          },
          "component": {
            "title": "Component",
            "type": "string",
            "description": "Path to the OME-Zarr image in the OME-Zarr plate that is processed. Example: \"some_plate.zarr/B/03/0\" (standard argument for Fractal tasks, managed by Fractal server)"
          },
          "metadata": {
            "title": "Metadata",
            "type": "object",
            "description": "dictionary containing metadata about the OME-Zarr. This task requires the following elements to be present in the metadata: \"num_levels\": int, number of pyramid levels in the image. This determines how many pyramid levels are built for the segmentation. \"coarsening_xy\": int, coarsening factor in XY of the downsampling when building the pyramid. (standard argument for Fractal tasks, managed by Fractal server)"
          },
          "workflow_file": {
            "title": "Workflow File",
            "type": "string",
            "description": "Absolute path to napari-workflows YAML file"
          },
          "input_specs": {
            "title": "Input Specs",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/definitions/NapariWorkflowsInput"
            },
            "description": "A dictionary of ``NapariWorkflowsInput`` values."
          },
          "output_specs": {
            "title": "Output Specs",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/definitions/NapariWorkflowsOutput"
            },
            "description": "A dictionary of ``NapariWorkflowsOutput`` values."
          },
          "input_ROI_table": {
            "title": "Input Roi Table",
            "default": "FOV_ROI_table",
            "type": "string",
            "description": "Name of the ROI table over which the task loops to apply napari workflows. Example: \"FOV_ROI_table\" => loop over the field of views \"organoid_ROI_table\" => loop over the organoid ROI table generated by another task \"well_ROI_table\" => process the whole well as one image"
          },
          "level": {
            "title": "Level",
            "default": 0,
            "type": "integer",
            "description": "Pyramid level of the image to be used as input for napari-workflows. Choose 0 to process at full resolution. Levels > 0 are currently only supported for workflows that only have intensity images as input and only produce a label images as output."
          },
          "relabeling": {
            "title": "Relabeling",
            "default": true,
            "type": "boolean",
            "description": "If ``True``, apply relabeling so that label values are unique across all ROIs in the well."
          },
          "expected_dimensions": {
            "title": "Expected Dimensions",
            "default": 3,
            "type": "integer",
            "description": "Expected dimensions (either 2 or 3). Useful when loading 2D images that are stored in a 3D array as (1, size_x, size_y) [which is the default way Fractal stored 2D images], but you want to make sure the napari workflow gets a 2D array to process. Also useful to set to 2 when loading a 2D OME-Zarr that is saved as (size_x, size_y)."
          }
        },
        "required": [
          "input_paths",
          "output_path",
          "component",
          "metadata",
          "workflow_file",
          "input_specs",
          "output_specs"
        ],
        "additionalProperties": false,
        "definitions": {
          "Channel": {
            "title": "Channel",
            "description": "A channel which is specified by either ``wavelength_id`` or ``label``.",
            "type": "object",
            "properties": {
              "wavelength_id": {
                "title": "Wavelength Id",
                "type": "string"
              },
              "label": {
                "title": "Label",
                "type": "string"
              }
            }
          },
          "NapariWorkflowsInput": {
            "title": "NapariWorkflowsInput",
            "description": "A value of the ``input_specs`` argument in ``napari_workflows_wrapper``.",
            "type": "object",
            "properties": {
              "type": {
                "title": "Type",
                "enum": [
                  "image",
                  "label"
                ],
                "type": "string"
              },
              "label_name": {
                "title": "Label Name",
                "type": "string"
              },
              "channel": {
                "$ref": "#/definitions/Channel"
              }
            },
            "required": [
              "type"
            ]
          },
          "NapariWorkflowsOutput": {
            "title": "NapariWorkflowsOutput",
            "description": "A value of the ``output_specs`` argument in ``napari_workflows_wrapper``.",
            "type": "object",
            "properties": {
              "type": {
                "title": "Type",
                "enum": [
                  "label",
                  "dataframe"
                ],
                "type": "string"
              },
              "label_name": {
                "title": "Label Name",
                "type": "string"
              },
              "table_name": {
                "title": "Table Name",
                "type": "string"
              }
            },
            "required": [
              "type"
            ]
          }
        }
      }
