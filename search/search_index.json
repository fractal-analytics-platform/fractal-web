{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Fractal Web Client","text":""},{"location":"#fractal","title":"Fractal","text":"<p>Fractal is a framework to process high-content imaging data at scale and prepare it for interactive visualization.</p> <p></p> <p>Fractal provides distributed workflows that convert TBs of image data into OME-Zarr files. The platform then processes the 3D image data by applying tasks like illumination correction, maximum intensity projection, 3D segmentation using cellpose and measurements using napari workflows. The pyramidal OME-Zarr files enable interactive visualization in the napari viewer.</p> <p>This is the repository that contains the Fractal web client. Find more information about Fractal in general and the other repositories at the Fractal home page.</p>"},{"location":"#web-client-architecture","title":"Web client architecture","text":"<p>The client is a Svelte application that uses SvelteKit as a framework. The application is composed of a set of pages that are rendered by a node server and served to a client browser. The node server acts as a proxy to the fractal server, forwarding the requests to the server and returning the responses to the client. Find more details in specific pages.</p>"},{"location":"#license-and-contributors","title":"License and contributors","text":"<p>Unless otherwise stated in each individual module, all Fractal components are released according to a BSD 3-Clause License, and Copyright is with Friedrich Miescher Institute for Biomedical Research and University of Zurich.</p> <p>Fractal was conceived in the Liberali Lab at the Friedrich Miescher Institute for Biomedical Research and in the Pelkmans Lab at the University of Zurich by @jluethi and @gusqgm. The Fractal project is now developed at the BioVisionCenter at the University of Zurich and the project lead is with @jluethi. The core development is done under contract by eXact lab S.r.l..</p>"},{"location":"changelog/","title":"CHANGELOG","text":"<p>Note: Numbers like (#123) point to closed Pull Requests on the fractal-web repository.</p>"},{"location":"changelog/#unreleased","title":"Unreleased","text":"<p>Starting from this release the Sandbox pages are not included in fractal-web anymore, instead they are static pages published together with the documentation.</p> <ul> <li>Moved JSON Schema components to a separated component (#518);</li> <li>Moved Sandbox pages to a separated component (#518);</li> </ul>"},{"location":"changelog/#120","title":"1.2.0","text":"<ul> <li>Conditionally included V1 pages (#514);</li> <li>Added task version update sandbox page (#509);</li> <li>JSON Schema form improvements (#509):<ul> <li>supported enums of any type;</li> <li>supported tuples;</li> <li>used grey color for optional properties that are unset;</li> <li>hided default label for fields without title.</li> </ul> </li> <li>Added docs about JSON Schema Sandbox page (#509).</li> <li>Added maintenance banner when fractal-server is down (#504).</li> </ul>"},{"location":"changelog/#110","title":"1.1.0","text":"<p>WARNING: with this release all the environment variables will be read from the environment, when the service is started, not during build time. Remember to load in your environment all the variables that you need when you start the service in production. This will not affect development setup. See https://fractal-analytics-platform.github.io/fractal-web/quickstart/ for instructions.</p> <ul> <li>Updated quickstart documenting the changes related to environment variables (#492).</li> <li>Fixed bug in default dataset selection when job references a deleted dataset (#492).</li> <li>Fixed v1 workflow task version update bug (#492).</li> <li>Added <code>npm pack</code> artifacts to files published by the CI during the release (#492).</li> <li>Fixed v2 admin job download link (#492).</li> <li>Imported all the environment variables dynamically (#492).</li> <li>Added backend logging using Log4js (#492).</li> <li>Improved JSON Schema Sandbox page (#490).</li> </ul>"},{"location":"changelog/#104","title":"1.0.4","text":"<ul> <li>Removed users management section from admin area v1 (#485).</li> <li>Included v1/v2 switcher in admin-area job page (#485).</li> <li>Setup tests to use PostgreSQL instead of SQlite (#484).</li> <li>Implemented tasks admin page (#484).</li> <li>Improved form builder used in workflow tasks without JSON Schema and in Meta properties tab (#481).</li> <li>Used collapsible sections in dataset history modal (#481).</li> </ul>"},{"location":"changelog/#103","title":"1.0.3","text":"<ul> <li>fixed issue in task version update when no arguments fix is needed (#477).</li> </ul>"},{"location":"changelog/#102","title":"1.0.2","text":"<ul> <li>fixed issue in task version update with optional arguments (#475).</li> </ul>"},{"location":"changelog/#101","title":"1.0.1","text":"<ul> <li>used payload containing all fields in meta properties PATCH endpoint (#473).</li> </ul>"},{"location":"changelog/#100","title":"1.0.0","text":"<ul> <li>Supported fractal-server API V2:<ul> <li>added menu switch to support legacy and current API (#434, #457);</li> <li>Dataset V2 CRUD with attribute and type filters (#434);</li> <li>new Dataset page with image list and filters (#434);</li> <li>updated Single Task form to handle parallel and non parallel fields (#434);</li> <li>updated workflow task form to handle parallel and non parallel arguments (#434);</li> <li>handled V2 import and export of workflow task arguments (#434);</li> <li>handled V2 version workflow task version update (#434);</li> <li>added admin \"Tasks V1/V2 compatibility\" page (#450);</li> <li>supported adding V1 task in V2 workflow (#450);</li> <li>removed read only property from V2 datasets (#450);</li> <li>added input filters tab in workflow task page (#452, #457);</li> <li>added searchable dropdowns for image filters (#452);</li> <li>moved editing of dataset inside dataset page (#452);</li> <li>supported editing of single dataset images (#457);</li> <li>used switches to represent boolean flags (#457);</li> <li>implemented continue/restart workflow (#465);</li> <li>set default first task when continuing a workflow (#466);</li> <li>displayed applied filters in workflow execution modal (#466);</li> <li>implemented import and export of datasets (#467);</li> <li>handled selection of default dataset on workflow page (#467);</li> </ul> </li> </ul>"},{"location":"changelog/#0102","title":"0.10.2","text":"<ul> <li>Added search functionality on jobs table filters (#424).</li> </ul>"},{"location":"changelog/#0101","title":"0.10.1","text":"<ul> <li>Fixed bug in workflow task meta properties update (#422).</li> </ul>"},{"location":"changelog/#0100","title":"0.10.0","text":"<p>This release requires fractal-server 1.4.6.</p> <ul> <li>Improved id and timestamp layout on jobs table (#420).</li> <li>Added query parameters to avoid loading unused fields on the following GET endpoints (#420):<ul> <li><code>/api/v1/job/</code>, <code>/api/v1/{project.id}/job/</code>, <code>/admin/job/</code> (<code>log</code> param)</li> <li><code>/api/v1/task/</code> (<code>args_schema</code> param)</li> <li><code>/api/v1/dataset/</code>, <code>/api/v1/project/{project.id}/dataset/</code> (<code>history</code> param)</li> </ul> </li> <li>Added <code>show_tmp_logs=true</code> query parameter to display log of running jobs (#420).</li> </ul>"},{"location":"changelog/#092","title":"0.9.2","text":"<ul> <li>Supported JSON Schema <code>allOf</code> feature in task arguments form (#417).</li> </ul>"},{"location":"changelog/#091","title":"0.9.1","text":"<ul> <li>Improved visualization of details on job logs modal (#415).</li> <li>Added job id filter on admin jobs page (#415).</li> <li>Added spinner on workflow task modal when tasks list is loading (#410).</li> <li>Implemented import and export of workflow task arguments (#410).</li> <li>Improved sorting of users in dropdown of the admin jobs page (#402).</li> <li>Fixed bug in retrieval of job log from the admin jobs page (#402).</li> <li>Highlighted relevant part of the error message in workflow job log modal (#402).</li> <li>Made the error message directly accessible from the new workflow page (#402).</li> </ul>"},{"location":"changelog/#090","title":"0.9.0","text":"<p>This release requires fractal-server 1.4.3.</p> <ul> <li>Removed <code>running</code> job status (#401).</li> <li>Aligned timestamp definitions with fractal-server 1.4.3 (#401).</li> <li>Sorted projects by descending creation timestamp (#401).</li> <li>Removed coverage setup from Playwright tests and CI (#399).</li> </ul>"},{"location":"changelog/#082","title":"0.8.2","text":"<ul> <li>Improvements on worflow task form (#393):<ul> <li>supported JSON Schema <code>enum</code> type;</li> <li>supported JSON Schema <code>minimum</code>, <code>maximum</code>, <code>exclusiveMinimum</code> and <code>exclusiveMaximum</code> for numeric types;</li> <li>supported JSON Schema <code>minItems</code> and <code>maxItems</code> for array type;</li> <li>supported reordering of array fields;</li> <li>set bold font on nested required properties;</li> <li>improved field validation error messages.</li> </ul> </li> <li>Add trailing slash to OAuth-callback url (#395).</li> </ul>"},{"location":"changelog/#081","title":"0.8.1","text":"<p>Note: with this release, <code>PUBLIC_FRACTAL_ADMIN_SUPPORT_EMAIL</code> becomes a required environment variable, and <code>npm run build</code> fails if it is missing. If you do not need a support email, just include a <code>PUBLIC_FRACTAL_ADMIN_SUPPORT_EMAIL=</code> line in your env file.</p> <ul> <li>Made <code>PUBLIC_FRACTAL_ADMIN_SUPPORT_EMAIL</code> static (#391).</li> <li>Added SLURM-account selection for user editing and for job execution (#391).</li> <li>Improved buttons feedback for slow API calls (#389).</li> </ul>"},{"location":"changelog/#080","title":"0.8.0","text":"<p>This release requires fractal-server 1.4.2.</p> <ul> <li>Users registered by the admin are automatically verified (#386).</li> <li>A warning message is displayed to unverified users (#386).</li> <li>Made page headers more homogeneous (#386).</li> <li>Replaced some icons with more suitable ones (#386).</li> <li>Added search boxes on datasets, workflows and workflow tasks selection (#386).</li> <li>Moved \"Create new workflow\" to a modal (#386).</li> <li>Added search project field on projects list page (#379).</li> <li>Used modal to create new project (#379).</li> <li>Sorted users in admin-area page (#379).</li> <li>Exposed stop-job and download-logs in admin-area jobs page (#379).</li> <li>Displayed number of rows in admin jobs page (#379).</li> <li>Fixed semver circular dependency issue (#379).</li> <li>Fixed issue with version sorting (#379).</li> <li>Sorted datasets by name (#379).</li> <li>Fixed accessibility issue (#379).</li> <li>Improved performance reducing the number of API calls on project, workflow and dataset pages (#379).</li> </ul>"},{"location":"changelog/#072","title":"0.7.2","text":"<p>Note: with this release, <code>PUBLIC_OAUTH_CLIENT_NAME</code> becomes a required environment variable, and <code>npm run build</code> fails if it is missing. If you do not need OAuth2 authentication, just include a <code>PUBLIC_OAUTH_CLIENT_NAME=</code> line in your env file.</p> <ul> <li>Made <code>PUBLIC_OAUTH_CLIENT_NAME</code> static (#376).</li> <li>Added help messages to user registration (#376).</li> <li>Made <code>AUTH_COOKIE_DOMAIN</code> optional (#376).</li> <li>Fixed hardcoded OAuth2 variable (#376).</li> </ul>"},{"location":"changelog/#071","title":"0.7.1","text":"<ul> <li>Auto-refresh of tasks table when a tasks collection completes successfully (#364).</li> <li>Auto-refresh of tasks collection status (#364).</li> <li>Made tasks list more compact by hiding the older versions (#364).</li> <li>Added the following fields on single task creation:<ul> <li>args schema file upload (#364).</li> <li>meta file upload (#364).</li> <li>docs info and docs link (#364).</li> </ul> </li> <li>Added editing of pinned package versions on tasks collection (#364).</li> <li>Supported editing of <code>cache_dir</code> from user profile page (#365).</li> <li>Added experimental workflow page with job monitoring (#363).</li> </ul>"},{"location":"changelog/#070","title":"0.7.0","text":"<p>This release requires fractal-server 1.4.0.</p> <ul> <li>Added admin jobs page (#352).</li> <li>Fixed expiration token issue for /admin and /auth endpoints (#352).</li> <li>Used new endpoints for retrieving current user and list of users (#350).</li> <li>Added user profile page (#336).</li> <li>Added admin area with users management (#336).</li> <li>Added Jobs button in home page (#346).</li> <li>Improved jobs table layout for small screens (#346).</li> <li>Fixed jobs status badge color bug (#346).</li> <li>Aligned with fractal-server 1.4.0 API, including trailing slash for endpoints' paths (#328).</li> <li>Added spinner during page loading (#328).</li> <li>Job pages:<ul> <li>Created per-user and per-workflow jobs pages (#328).</li> <li>Removed per-project jobs pages (#328).</li> <li>Added automatic background update job pages (#328).</li> </ul> </li> <li>Improved handling of session expiration (#333).</li> <li>Fixed logout bug (#327).</li> <li>Implemented OAuth2 login (#333).</li> <li>Added more playwright tests (#332).</li> </ul>"},{"location":"changelog/#063","title":"0.6.3","text":"<ul> <li>Implemented task-version update (#325).</li> </ul>"},{"location":"changelog/#062","title":"0.6.2","text":"<ul> <li>Fixed peformance issue with argument-description popovers (#324).</li> <li>Added end-to-end tests and coverage configuration (#320).</li> </ul>"},{"location":"changelog/#061","title":"0.6.1","text":"<p>This release works best with fractal-server &gt;=1.3.12 (since it makes use of the <code>dataset.history</code> property), but previous fractal-server versions are still supported.</p> <ul> <li>Added dataset history modal (#316).</li> <li>Fixed bug with save/discard changes in workflow task (#315).</li> <li>Fixed first-run redirects issue (#315).</li> </ul>"},{"location":"changelog/#060","title":"0.6.0","text":"<ul> <li>Added fractal-web version to the footer (#312).</li> <li>Added new modal for create/update dataset feature (#310).</li> <li>Standardized modal management to fix some bugs (#306).</li> <li>Added proxy endpoints and refactored error propagation (#288).</li> <li>Remove use of deployment-type <code>fractal-server</code> variable (#298).</li> <li>Add GitHub action to create GitHub releases (#305).</li> <li>Add a BSD3 license (#300).</li> </ul>"},{"location":"changelog/#056","title":"0.5.6","text":"<ul> <li>Improve displaying of <code>Dataset.meta</code> properties (#281).</li> <li>Remove obsolete file <code>src/routes/api/alive/+server.js</code> (#283).</li> </ul>"},{"location":"changelog/#055","title":"0.5.5","text":"<ul> <li>Fix bug in <code>JSchema.svelte</code> (#279).</li> </ul>"},{"location":"changelog/#054","title":"0.5.4","text":"<ul> <li>Always propagate cookie for API calls to <code>FRACTAL_SERVER_HOST</code>, even for different domains (#275).</li> </ul>"},{"location":"changelog/#053","title":"0.5.3","text":"<ul> <li>Add confirmation dialog for delete-task operation (#272).</li> <li>Enable WorkflowTask Info tab, and render <code>docs_info</code> from markdown (#271).</li> <li>Update import-workflow feature (#269).</li> <li>Revamp home page and user-related layout (#259).</li> <li>Review logout action (#259).</li> <li>Implement editing and deletion of tasks (#207, #268). </li> <li>Implement A-to-B workflow execution (#254).</li> <li>Fix WorkflowTask <code>meta</code> update (#261).</li> <li>Improve enable/disable button state, for project/dataset/workflow/resource creation (#257).</li> </ul>"},{"location":"changelog/#052","title":"0.5.2","text":"<ul> <li>Improve tasks handling within the client (#233).</li> <li>Prevent accidental loss of user-provided WorkflowTask arguments (#234).</li> </ul>"},{"location":"changelog/#051","title":"0.5.1","text":"<p>First release included in this CHANGELOG.</p>"},{"location":"environment-variables/","title":"Environment variables","text":"<p>The following environment variables can be used to configure fractal-web. </p> <p>Only when using <code>npm run dev</code> or <code>npm run preview</code> these variables are automatically read from <code>.env.development</code> and <code>.env</code> files. In production they must be set in the shell that starts the node process.</p> <ul> <li><code>FRACTAL_SERVER_HOST</code>: represents the URL of the fractal-server application (e.g. http://localhost:8000, or http://subdomain.example.org:8000); this variable is required;</li> <li><code>AUTH_COOKIE_NAME</code>: the name of the cookie used to store the user session; the default value is <code>fastapiusersauth</code>;</li> <li><code>AUTH_COOKIE_DOMAIN</code>: specifies which server can receive the cookie; remember to set it in production;</li> <li><code>AUTH_COOKIE_PATH</code>: the URL path where the cookie will be available; the default value is <code>/</code>;</li> <li><code>AUTH_COOKIE_SECURE</code>: sends the cookie only if the server is using HTTPS; the default value is <code>true</code>, can be set to <code>false</code> during development;</li> <li><code>AUTH_COOKIE_SAME_SITE</code>: set the SameSite attribute to the cookie; the default value is <code>lax</code>;</li> <li><code>PUBLIC_FRACTAL_ADMIN_SUPPORT_EMAIL</code>: the e-mail address displayed in the home page which can be used to send support requests; if the value is not set nothing is shown;</li> <li><code>PUBLIC_UPDATE_JOBS_INTERVAL</code>: the delay in milliseconds which occurs between two background requests that check for job status updates; the default value is <code>3000</code>;</li> <li><code>PUBLIC_OAUTH_CLIENT_NAME</code>: if set, the application enables the external account login via OAuth2; the name is used to create the authorization call sent to fractal-server (see configuration page);</li> <li><code>LOG_FILE</code>: the path of the file where logs will be written; by default is unset and no file will be created;</li> <li><code>LOG_LEVEL_FILE</code>: the log level of logs that will be written to the file; the default value is <code>info</code>;</li> <li><code>LOG_LEVEL_CONSOLE</code>: the log level of logs that will be written to the console; the default value is <code>warn</code>;</li> <li><code>FRACTAL_API_V1_MODE</code>: include/exclude V1 pages and version switcher; the default value is <code>include</code>.</li> </ul> <p>When running directly using <code>node</code> command these extra variables can also be configured:</p> <ul> <li><code>PORT</code>: specifies the port where Svelte server will run; the default value is 5173;</li> <li><code>ORIGIN</code> the URL where the app will be served (e.g. http://localhost:5173, or https://subdomain.example.org).</li> </ul>"},{"location":"environment-variables/#common-issues-related-to-environment-variables","title":"Common issues related to environment variables","text":"<p>The <code>node</code> command relies on some extra environment variables, and especially on <code>ORIGIN</code>:</p> <p>HTTP doesn't give SvelteKit a reliable way to know the URL that is currently being requested. The simplest way to tell SvelteKit where the app is being served is to set the <code>ORIGIN</code> environment variable  (see SvelteKit node servers documentation). A wrong origin value will result in the error message \"Cross-site POST form submissions are forbidden\".</p> <p>Unexpected behaviors can be related to wrong values of the <code>AUTH_COOKIE_DOMAIN</code> variable:</p> <p>A typical gotcha: if there is a mismatch between the cookie domain and the URL you are using (e.g. one points to localhost and the other one to 127.0.0.1), then the cookie won't be set and this will fail silently, therefore likely triggering other unexpected behaviors. If you leave the <code>AUTH_COOKIE_DOMAIN</code> empty, the cookie domain will be inferred from the HTTP call. This is useful to avoid domain mismatch issues during testing and development, but in production is suggested to set it as the name of the domain where the fractal-web server is running.</p>"},{"location":"examples/","title":"Examples","text":"<p>in progress</p> <p>See examples in https://github.com/fractal-analytics-platform/fractal-web/tree/main/examples, with configurations for:</p> <ul> <li>fractal-server</li> <li>fractal-web</li> <li>Apache proxy</li> </ul>"},{"location":"fractal_server/","title":"Basic guide for fractal-server startup","text":"<p>The <code>lib/fractal-server</code> folder describes the basic steps to install and run a local <code>fractal-server</code> instance, that can be then accessed through <code>fractal-web</code>.</p> <p>Briefly, one should: * Install fractal-server (<code>pip install fractal-server</code>); * Set up the database (<code>fractalctl set-db</code>); * Startup an instance (<code>fractalctl start</code>).</p> <p>Notes: 1. There must exist a <code>.fractal_server.env</code> file (see example in    <code>../lib/fractal-server/</code>), with some configuration variables. 2. It is necessary that the fractal-server instance is reachable from the    client by network connection (this is typically trivial, if fractal-server    is run locally e.g. at http://localhost:8000). This address also needs to match    the one in the <code>fractal-web</code> configuration file (either <code>.env</code> or    <code>.env.development</code>, depending on how you are running <code>fractal-web</code>). 3. It is useful to set the fractal-server environment variable    <code>JWT_EXPIRE_SECONDS</code> to a relevant value for the user to persist its session    on the client (e.g. <code>JWT_EXPIRE_SECONDS=84600</code>). 4. The configuration env file also defines some default credentials for an    admin user, that can be used for testing.</p>"},{"location":"oauth2/","title":"Integration with OAuth2 providers","text":"<p>Fractal supports OAuth2 login using GitHub, Google or custom providers.</p> <p>First, configure the server as described in OAuth2 documentation of fractal-server.</p> <p>Fractal-web callback has to be defined using the following path: <code>/auth/login/oauth2</code>.</p> <p>Then, enable the desired provider on fractal-web using the <code>PUBLIC_OAUTH_CLIENT_NAME</code> environment variable, for example:</p> <pre><code>PUBLIC_OAUTH_CLIENT_NAME=github\n</code></pre> <p>This variable has to match the client name defined in fractal-server configuration.</p>"},{"location":"oauth2/#full-details-for-local-example","title":"Full details for local example","text":"<ol> <li>Register an OAuth2 app on GitHub with<ul> <li>Homepage URL: http://127.0.0.1:5173</li> <li>Authorization callback URL: http://127.0.0.1:5173/auth/login/oauth2/</li> </ul> </li> <li>Set up the following env variables for fractal-server: <pre><code>OAUTH_GITHUB_CLIENT_ID=...\nOAUTH_GITHUB_CLIENT_SECRET=...\nOAUTH_GITHUB_REDIRECT_URL=http://127.0.0.1:5173/auth/login/oauth2/\n# [all other variables]\n</code></pre></li> <li>Set up the following env variables for fractal-web: <pre><code>FRACTAL_SERVER_HOST=http://127.0.0.1:8000\nAUTH_COOKIE_DOMAIN=127.0.0.1\nPUBLIC_OAUTH_CLIENT_NAME=github\n# [all other variables]\n</code></pre></li> </ol>"},{"location":"quickstart/","title":"Quickstart instructions","text":"<p>This page describes how to install fractal-web from release packages. If you need to install it from the git repository see the development setup page.</p>"},{"location":"quickstart/#install-node","title":"Install node","text":"<p>Versions 18 or 20 of Node.js are recommended (check your version with <code>node -v</code>). Version 16 is known to work, but not recommended.</p> <p>If these versions are not available via your favorite package installer, you can install them from this link for your specific platform. Another option is to use nvm, e.g. via <pre><code>nvm install 18\nnvm alias default 18\n</code></pre></p>"},{"location":"quickstart/#install-fractal-web-from-release-packages","title":"Install fractal-web from release packages","text":"<p>Starting from version 1.1.0, fractal-web releases provide tar.gz files containing the built files for each supported node version. You can install these packages with the following command:</p> <pre><code>FRACTAL_WEB_VERSION=1.1.0 &amp;&amp; NODE_MAJOR_VERSION=20 &amp;&amp; wget -qO- \"https://github.com/fractal-analytics-platform/fractal-web/releases/download/v${FRACTAL_WEB_VERSION}/node-${NODE_MAJOR_VERSION}-fractal-web-v${FRACTAL_WEB_VERSION}.tar.gz\" | tar -xz\n</code></pre> <p>Note: this will unpack in the current working directory the file <code>package.json</code> and the folders <code>build</code> and <code>node_modules</code>.</p> <p>To start the application installed in this way see the section Run fractal-web from the build folder below.</p>"},{"location":"quickstart/#set-environment-variables","title":"Set environment variables","text":"<p>To properly run fractal-web you have to configure some environment variables. The environment variables page contains the complete list of supported environment variables and their default values. It also includes some troubleshooting infomation about errors related to environment variables misconfiguration.</p> <p>If you want to run the application executing <code>node</code> in the <code>build</code> folder you have to export the environment variables in your shell. The following section provides an example on how to do that with a script.</p>"},{"location":"quickstart/#run-fractal-web-from-the-build-folder","title":"Run fractal-web from the build folder","text":"<p>You can create a script with the following content to run fractal-web installed from a release package:</p> <pre><code>#!/bin/sh\n\nexport FRACTAL_SERVER_HOST=http://localhost:8000\nexport PUBLIC_FRACTAL_ADMIN_SUPPORT_EMAIL=help@localhost\nexport PUBLIC_OAUTH_CLIENT_NAME=\n# remember to set this in production (e.g. subdomain.example.org)\nexport AUTH_COOKIE_DOMAIN=\n\nexport ORIGIN=http://localhost:5173\nexport PORT=5173\n\nexport LOG_FILE=fractal-web.log\n# default values for logging levels (uncomment if needed)\n# export LOG_LEVEL_FILE=info\n# export LOG_LEVEL_CONSOLE=warn\n\nexport FRACTAL_API_V1_MODE=include\n\n# default values are usually fine for the following variables; remove comments if needed\n#export AUTH_COOKIE_NAME=fastapiusersauth\n#export AUTH_COOKIE_PATH=/\n#export AUTH_COOKIE_SAME_SITE=lax\n#export PUBLIC_UPDATE_JOBS_INTERVAL=3000\n\nnode build/\n</code></pre> <p>Note: starting from Node 20 you can also load the environment variables from a file using the <code>--env-file</code> flag:</p> <pre><code>node --env-file=.env build\n</code></pre>"},{"location":"sandbox-pages/","title":"Sandbox pages","text":"<p>When developing tasks it can be useful to have a quick way to test how a given JSON schema will appear in the workflow task arguments form or how a task version update will affect the users.</p> <p>The following sandbox pages are available:</p> <ul> <li>JSON Schema Sandbox page</li> <li>Task Version Update Sandbox page</li> </ul> <p>Both these pages provide a textarea for the JSON schemas. Notice that you can't paste the whole task manifest: you need to pick one of the <code>args_schema</code> values.</p> <p>To locally preview the sandbox pages enter the <code>sandbox</code> directory and run:</p> <pre><code>npm install\nnpm run dev\n</code></pre>"},{"location":"version-compatibility/","title":"Version Compatibility","text":"<p>The following table shows which <code>fractal-server</code> versions are compatible with which <code>fractal-web</code> versions.</p> fractal-web fractal-server 1.2.0 2.0.6 1.1.0 2.0.5 1.0.4 2.0.5 1.0.3 2.0.0 1.0.2 2.0.0 1.0.1 2.0.0 1.0.0 2.0.0 0.10.2 1.4.6 0.10.1 1.4.6 0.10.0 1.4.6 0.9.2 1.4.3 0.9.1 1.4.3 0.9.0 1.4.3 0.8.2 1.4.2 0.8.1 1.4.2 0.8.0 1.4.2"},{"location":"development/","title":"Development","text":"<p>Here are some useful details for <code>fractal-web</code> developments:</p> <ul> <li>Development setup</li> <li>Code-base structure</li> <li>Testing</li> <li>Documentation</li> <li>Precommit</li> <li>Release</li> </ul>"},{"location":"development/docs/","title":"Documentation","text":"<p>Here are the instructions to serve the documentation on localhost:8001:</p> <pre><code>python -m venv venv\nsource venv/bin/activate\npython -m pip install -r docs/doc-requirements.txt\nmkdocs serve --dev-addr localhost:8001\n</code></pre> <p>The documentation includes links to the sandbox pages. These pages are built separately and added to the site folder by the CI before publishing the documentation, so these links will not work using the mkdocs preview command displayed above. If you want to preview the sandbox pages run <code>npm run dev</code> inside the sandbox folder.</p>"},{"location":"development/jschema/","title":"JSON Schema form module","text":"<p>The <code>jschema</code> folder on this repository contains a Svelte project that provides the JSON Schema form component (<code>JSchema.svelte</code>) and its related functions and classes. The file <code>index.js</code> contains the list of components and functions that are exported for public usage, so that they can be included using <code>from 'fractal-jschema'</code> from the main project.</p> <p>The main project defines <code>fractal-jschema</code> in <code>vite.config.js</code>, as an alias pointing to <code>jschema/src/lib/index.js</code>. In this way the jschema module is automatically built when the main project is built and the Hot Module Reload feature still works.</p> <p>Moreover, the path to jschema module has been added as <code>server.fs.allow</code> Vite config option, to prevent the following error while serving the files using <code>npm run dev</code>:</p> <pre><code>The request url \"/path/to/fractal-web/jschema/src/lib/index.js\" is outside of Vite serving allow list.\n</code></pre> <p>Important: When importing js files inside the <code>jschema</code> module it is necessary to use a relative path. The editor might autocomplete the imports using the <code>$lib</code> prefix, but that will not work when the module is included in the main application, since it redefines the <code>$lib</code> path again.</p>"},{"location":"development/jschema/#structure-of-the-code","title":"Structure of the code","text":"<p>The <code>JSchema</code> Svelte component intializes a class named <code>FormManager</code>, that handles the following features:</p> <ul> <li>creates and stores an object (<code>root</code>) used to draw the form;</li> <li>provides the functions to create new form elements;</li> <li>attaches a <code>notifyChange()</code> function to each created form element; this function is used by each component to notify changes to the manager (e.g. the value of an input changes, a new element is added to an array, and so on), then the function dispatches a <code>change</code> event up to the <code>JSchema</code> component;</li> <li>wraps the <code>SchemaValidator</code> and provides a <code>validate()</code> function;</li> <li>provides a <code>getFormData()</code> function, that returns an object based on the data present in the form.</li> </ul> <p>The creation of the <code>root</code> object requires 2 preliminary steps, that are useful to reduce the complexity of the subsequent object creation:</p> <ol> <li>provided JSON Schema is adapted, to create a simpler but equivalent JSON Schema (<code>jschema_adapter.js</code>);</li> <li>an object representing the initial form data is created, considering both the provided data (if any) and the default values (<code>jschema_initial_data.js</code>).</li> </ol> <p>The <code>adaptJsonSchema()</code> function does the following:</p> <ol> <li>removes the properties to ignore (e.g. <code>zarr_url</code>, <code>zarr_urls</code>, <code>init_args</code>, <code>zarr_dir</code>);</li> <li>resolves and replaces the schema references (<code>$ref</code> fields pointing to definitions);</li> <li>merges the <code>allOf</code> items.</li> </ol> <p>The <code>getJsonSchemaData()</code> function initializes an object representing the initial form data. If the <code>initialValue</code> parameter is not set the created object is populated using the default values. If an <code>initialValue</code> object is provided, the function adds to it all the optional fields set to null (this is needed to have an object that acts as a complete skeleton for the form).</p> <p>Using the adapted JSON Schema and the computed data object, the <code>FormManager</code> populates the <code>root</code> object, initializing a dedicated class for each form element (<code>NumberFormElement</code>, <code>ArrayFormElement</code>, <code>BooleanFormElement</code>, ...). These classes contain fields that are specific to each form element type and may contain additional functions to manipulate them (e.g. <code>addChild</code>, <code>removeChild</code>). Functions that add new children delegate the creation to the <code>FormManager</code>, since it is the class having the knowledge to create form elements of any type, and then add the new child to an internal array of children.</p> <p>Each form element is mapped to a dedicated Svelte component (e.g. the <code>NumberFormElement</code> class is passed to a <code>NumberProperty.svelte</code> component). Each property component can contain additional functions for validating the input values and display the validation errors, but delegates to the wrapped form element class any additional logic.</p> <p>This structure attempts to achieve a greater separation of concerns, needed to handle properly such a complex component.</p>"},{"location":"development/precommit/","title":"Precommit","text":""},{"location":"development/precommit/#pre-commit-setup","title":"pre-commit setup","text":"<p>In your local folder, create a file <code>.git/hooks/pre-commit</code> with the following content</p> <pre><code>#!/bin/bash\nnpm run pre-commit\nRESULT=$?\n[ $RESULT -ne 0 ] &amp;&amp; exit 1\nexit 0\n</code></pre> <p>and make this file executable (<code>chmod +x .git/hooks/pre-commit</code>).</p> <p>In this way, <code>npm run pre-commit</code> will run before every commit. This script is defined in <code>package.json</code>, and points to <code>lint-staged</code>. The configuration is written in <code>.lintstagedrc.json</code>, and it lists the checks to perform on each kind of file (e.g. <code>eslint</code> and then <code>prettier</code>).</p>"},{"location":"development/release/","title":"Release","text":""},{"location":"development/release/#release","title":"Release","text":"<p>Steps to release a new <code>fractal-web</code> version:</p> <ul> <li>Update <code>CHANGELOG.md</code> on <code>main</code> branch, replacing the \"Unreleased\" temporary title with the desidered version number</li> <li>Update the <code>version-compatibility.md</code> doc page</li> <li>Commit the changes</li> <li>Execute <code>npm version &lt;major|minor|patch&gt;</code></li> <li>Execute <code>git push origin main</code></li> <li>Execute <code>git push origin &lt;new-version-tag&gt;</code></li> <li>Update the GitHub release page with the information from <code>CHANGELOG.md</code></li> </ul> <p>NOTE: Pushing a new version tag (like v5.6.7) triggers a dedicated GitHub action, which also creates build artifacts (based on <code>npm pack</code>) and attaches them to the GitHub release.</p>"},{"location":"development/setup/","title":"Development setup","text":""},{"location":"development/setup/#install-node","title":"Install node","text":"<p>Versions 18 or 20 of Node.js are recommended. See the quickstart for more details about how to install node.</p>"},{"location":"development/setup/#install-fractal-web-from-git-repository","title":"Install fractal-web from git repository","text":"<p>Clone this repository <pre><code>git clone https://github.com/fractal-analytics-platform/fractal-web.git\ncd fractal-web\n</code></pre> then optionally checkout to a specific version tag <pre><code>git checkout v0.6.0\n</code></pre> and finally install via <pre><code>cd jschema\nnpm install\ncd ..\nnpm install\n</code></pre></p>"},{"location":"development/setup/#set-environment-variables","title":"Set environment variables","text":"<p>To properly run fractal-web you have to configure some environment variables. The environment variables page contains the complete list of supported environment variables and their default values. It also includes some troubleshooting infomation about errors related to environment variables misconfiguration.</p> <p>When running the application from the git repository, environment variables are set either in <code>.env</code> or <code>.env.development</code> files, see vite documentation (briefly: <code>.env.development</code> is the relevant file when using <code>npm run dev</code> and <code>.env</code> is the relevant file when using <code>npm run preview</code>).</p> <p>You can also add your customizations in a file named <code>.env.local</code> or <code>.env.development.local</code> to avoid writing on env files that are under version control.</p>"},{"location":"development/setup/#run-fractal-web-from-git-repo","title":"Run fractal-web from git repo","text":"<p>For development, run the client application via</p> <pre><code>npm run dev\n</code></pre> <p>The application will run at <code>http://localhost:5173</code>.</p> <p>To test a production build, first execute</p> <pre><code>npm run build\n</code></pre> <p>And then</p> <pre><code>npm run preview\n</code></pre> <p>Also in this case the application runs at <code>http://localhost:5173</code>.</p>"},{"location":"development/structure/","title":"Code-base structure","text":"<p>This project is based on svelte kit and follows its conventions and structure.</p>"},{"location":"development/structure/#1-level-folders","title":"1-level folders","text":"<p>By default, the main application folder is located at <code>/src</code>. The structure of this folder is explained in depth in svelte kit docs</p> <p><code>/static</code> is a folder related to static files that will be served by the client server. More on this could be found in the svelte kit docs.</p> <p>The <code>/lib</code> folder contains files and sources that enable correct instrumentation and testing of this client application. Currently, within this folder are present files to support the project's unit tests arrangements and other library files to populate local instances of the fractal server in order to test the client.</p> <p>As for testing, currently, there are two folders <code>/__tests__</code> and <code>/tests</code>. The former contains files of unit tests executed by <code>vitest</code> and the latest is related to <code>playwright</code> testing. This structure could be improved and organized differently by updating project configuration files, specifically <code>vite.config.js</code> and <code>playwrght.config.js</code> which are located at project root.</p> <p><code>/examples</code> folder contains configuration guidance to set up local environments to test different fractal server / fractal web interoperability architectures.</p> <p><code>/docs</code> folder is the root of the project docs files.</p> <pre><code>[project root]\n\u251c /src\n\u251c /static\n\u251c /lib\n\u251c /__tests__\n\u251c /tests\n\u251c /examples\n\u251c /docs\n</code></pre>"},{"location":"development/structure/#application-structure","title":"Application structure","text":"<p>With reference to <code>/src/routes</code> folder, therein are defined svelte kit page components that structure the fractal web client.</p> <p>It is important to mention that, this client application is server-side rendered. By default, this is the default behaviour of svelte kit.</p> <p>Before proceeding, it is important to understand the distinction of files terminating with the suffix <code>+[.]server.js</code>. Those files are explicitly processed by the client's server.</p> <p>This client application is in essence a proxy that enables users to interact with a server application, the fractal server. Through the browser interface, the svelte application enable users to build HTTP requests that will be sent to the fractal server.</p> <p>The svelte client and fractal server interact through a REST interface.</p> <p>But how is this interaction implemented in this client?</p>"},{"location":"development/structure/#client-server-interoperability","title":"Client server interoperability","text":"<p>As said, the svelte client communicates with the fractal server through a set of REST APIs.</p> <p>In this client, every request to the fractal server is sent by the nodejs server that is serving the svelte application.</p> <p>It is important to understand that these requests are made in the server context of the svelte client. No request to the fractal server is sent directly by the browser of the user.</p> <p>The fact that every request on behalf of a user is sent through a common backend nodejs server, implies a proxy architecture. The way this works is the following: the svelte client in the browser sends a HTTP request to the nodejs server that is serving the application. This request, with the attached cookies, is then used to compose a new request to be sent to the fractal server.</p> <p>Note that the authentication context is kept thanks to cookies that establish user sessions.</p> <p>The following image provides an overview for the reader of the described architecture.</p> <p></p> <p>To avoid duplicating the logic of each fractal-server endpoint and simplify the error handling, a special Svelte route has been setup to act like a transparent proxy: <code>src/routes/api/[...path]/+server.js</code>. This is one of the suggested way to handle a different backend according to Svelte Kit FAQ.</p> <p>So, by default, the AJAX calls performed by the front-end have the same path and payload of the fractal-server API, but are sent to the Node.js Svelte back-end. Some Python API endpoints (like the <code>/auth</code> and <code>/admin</code> endpoints) that don't start with <code>/api</code> are handled in a slightly different way. Indeed, the <code>/api</code> prefix is needed by <code>hooks.server.js</code> to detect if the received call is an AJAX call, in order to process the token expiration in a custom way. To preserve this behavior for all the API calls these paths are rewritten adding the <code>/api</code> prefix.</p> <p>Summarizing, the frontend code:</p> <ul> <li>uses exactly the same path of the fractal-server API for the <code>/api</code> endpoints </li> <li>uses <code>/api/auth</code> for <code>/auth</code> endpoints</li> <li>uses <code>/api/admin</code> for <code>/admin</code> endpoints</li> </ul> <p>Other than the AJAX calls, there are also some calls to fractal-server API done by Svelte SSR, while generating the HTML page. These requests are defined in files under <code>src/lib/server/api/v1</code>. Here requests are grouped by contexts as <code>auth_api</code>, <code>admin_api</code>, [...].</p>"},{"location":"development/structure/#an-example-using-actions","title":"An example using actions","text":"<p>The login is still using the Svelte action approach, in which we have to extract the data from a formData object and then use it to build a JSON payload to be forwarded to fractal-server.</p> <p>Consider the code at <code>src/lib/server/api/v1/auth_api.js:5</code>:</p> <pre><code>/**\n * Request to authenticate user\n * @param fetch\n * @param data\n * @returns {Promise&lt;*&gt;}\n */\nexport async function userAuthentication(fetch, data) {\nconst response = await fetch(FRACTAL_SERVER_HOST + '/auth/token/login', {\nmethod: 'POST',\ncredentials: 'include',\nmode: 'cors',\nbody: data\n});\n\nif (!response.ok) {\nthrow new Error('Authentication failed');\n}\n\nreturn await response.json();\n}\n</code></pre> <p>This code is responsible to call the <code>/auth/token/login</code> REST api endpoint of the fractal server. The request is made by the svelte client application in a backend context within the nodejs server.</p> <p>The client will, if the request succeeds, handle the fractal server response in a form action.</p> <pre><code>// src/routes/auth/login/+page.server.js\n\nexport const actions = {\n// Default page action / Handles POST requests\ndefault: async ({ request, cookies, fetch }) =&gt; {\n// TODO: Handle login request\nconsole.log('Login action');\n\n// Get form data\nconst formData = await request.formData();\n// Set auth data\nlet authData;\ntry {\nauthData = await userAuthentication(fetch, formData);\n} catch (error) {\nconsole.error(error);\nreturn fail(400, { invalidMessage: 'Invalid credentials', invalid: true });\n}\nconst authToken = authData.access_token;\n// Decode JWT token claims\nconst tokenClaims = jose.decodeJwt(authToken);\n\n// Set the authentication cookie\nconst cookieOptions = {\ndomain: `${AUTH_COOKIE_DOMAIN}`,\npath: `${AUTH_COOKIE_PATH}`,\nexpires: new Date(tokenClaims.exp * 1000),\nsameSite: `${AUTH_COOKIE_SAME_SITE}`,\nsecure: `${AUTH_COOKIE_SECURE}` === 'true',\nhttpOnly: `${AUTH_COOKIE_HTTP_ONLY}` === 'true'\n};\nconsole.log(cookieOptions);\ncookies.set(AUTH_COOKIE_NAME, authData.access_token, cookieOptions);\n\nthrow redirect(302, '/');\n}\n};\n</code></pre> <p>The previous code is executed in the backend (as one could understand by the name of the file) and it basically provides a form action that allows a user to login.</p> <p>This kind of pattern, form actions, is widely used within the client application, as it enables the browser-side client application to request different actions the server-side should take.</p> <p>In this case, we briefly described the authentication flow of the svelte client application.</p> <p>Notice that the authentication and session of a user is managed through cookies. The client application requests a authentication token to the fractal server, which data is used to create another cookie that the nodejs server of the client application sends to the browser.</p> <p>The default action within the <code>+page.server.js</code> is requested through an HTTP request that the browser-side client app makes when a user sends an HTML from, for completion, the one defined in:</p> <pre><code>&lt;!-- src/routes/auth/login/+page.svelte --&gt;\n\n&lt;script&gt;\nexport let form;\nlet loginError = false;\n\nif (form?.invalid) {\nloginError = true;\n}\n&lt;/script&gt;\n\n&lt;div class='container'&gt;\n  &lt;div class='row'&gt;\n    &lt;h1&gt;Login&lt;/h1&gt;\n  &lt;/div&gt;\n  &lt;div class='row'&gt;\n    &lt;div class='col-md-4'&gt;\n      &lt;form method='POST'&gt;\n        &lt;div class='mb-3'&gt;\n          &lt;label for='userEmail' class='form-label'&gt;Email address&lt;/label&gt;\n          &lt;input\n            name='username'\n            type='email'\n            class=\"form-control {loginError ? 'is-invalid' : ''}\"\n            id='userEmail'\n            aria-describedby='emailHelp'\n            required\n          /&gt;\n          &lt;div id='emailHelp' class='form-text'&gt;The email you provided to the IT manager&lt;/div&gt;\n          &lt;div class='invalid-feedback'&gt;\n            {form?.invalidMessage}\n          &lt;/div&gt;\n        &lt;/div&gt;\n        &lt;div class='mb-3'&gt;\n          &lt;label for='userPassword' class='form-label'&gt;Password&lt;/label&gt;\n          &lt;input name='password' type='password' class='form-control' id='userPassword' required /&gt;\n        &lt;/div&gt;\n        &lt;button class='btn btn-primary'&gt;Submit&lt;/button&gt;\n      &lt;/form&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"development/structure/#application-library","title":"Application library","text":"<p>While the <code>src/routes</code> is the public-facing side of the client application, <code>src/lib</code> contains the client internals.</p> <p>Within the lib are present four main sections: <code>common</code>, <code>components</code>, <code>server</code> and <code>stores</code>.</p> <p>Common contains client modules that export shared functionalities for both browser and server side parts of the app.</p> <p>Components contains all the svelte components definitions that are used within the client app. Components are organized by resources defined and managed by the fractal server.</p> <p>Server this is a special section as it is never shared and bundled into the package that a user receives in the browser. More info about this could be found in the svelte kit doc about server-only modules</p> <p>Stores are modules that export svelte store objects that are used by components to manage the state of the application.</p> <p>Note that stores are currently not well-organized or used due to the youth of the client.</p>"},{"location":"development/structure/#error-handling","title":"Error handling","text":"<p>The errors received from fractal-server are displayed in error modals without changing the content of their messages. The <code>displayStandardErrorAlert()</code> function can be used to easily display an error message alert in a div having a specific id. This function returns a <code>StandardErrorAlert</code> object that can be stored in a variable and then used to hide previous error messages calling its <code>hide()</code> method.</p> <p>Here an example:</p> <pre><code>async function myFunction() {\n// remove previous error\nif (errorAlert) {\nerrorAlert.hide();\n}\n\nconst response = await fetch(`/api/v1/something`);\nif (response.ok) {\n// do something with the result\n} else {\nconst error = await response.json();\n// add error alert inside the element having 'errorElement' as id\nerrorAlert = displayStandardErrorAlert(error, 'errorElement');\n}\n}\n</code></pre> <p>When the displaying of the error alert should be handled by the caller function it is possible to throw an <code>AlertError</code> that has to be caught by the caller in order to display the message.</p> <p>Errors happening during SSR should be considered fatal and propagated using the <code>responseError()</code> utility function:</p> <pre><code>if (response.ok) {\nreturn await response.json();\n}\nawait responseError(response);\n</code></pre>"},{"location":"development/tests/","title":"Testing","text":""},{"location":"development/tests/#unit-tests","title":"Unit tests","text":"<p>Unit tests are performed via vitest, via the <code>test</code> script defined in <code>package.json</code>.</p>"},{"location":"development/tests/#end-to-end-testing","title":"End-to-end testing","text":"<p>E2E tests are done using playwright. They can be executed using the following command:</p> <pre><code>npx playwright test\n</code></pre> <p>To print Svelte webserver log set the environment variable <code>DEBUG=pw:webserver</code>.</p> <p>To execute the tests seeing the browser add the <code>--headed</code> flag or the <code>--debug</code> flag if you need to watch them step by step.</p>"},{"location":"development/tests/#coverage","title":"Coverage","text":"<p>Warning: code coverage results are not reliable at the moment</p> <p>Coverage for the unit tests:</p> <pre><code>npx vitest --coverage\n</code></pre> <p>Warning: coverage takes some time, since we are using the option <code>{ all: true }</code>.</p>"},{"location":"development/tests/#local-fractal-server-instance","title":"Local <code>fractal-server</code> instance","text":"<p>The <code>lib/fractal-server</code> folder includes basic instructions to get a local instance of <code>fractal-server</code> running.</p>"},{"location":"development/tests/#remote-fractal-server-instance","title":"Remote <code>fractal-server</code> instance","text":"<p>One could also test a local <code>fractal-web</code> instance with a remote <code>fractal-server</code> one. If SSH access is possible, then a command like <pre><code>REMOTE_PORT=8010\nLOCAL_PORT=8000\nREMOTE_USER=...\nREMOTE_HOST_IP=...\n\nssh $REMOTE_USER@$REMOTE_HOST_IP -L $LOCAL_PORT:127.0.0.1:$REMOTE_PORT -N\n</code></pre> should work and forward the remote port <code>REMOTE_PORT</code> to the <code>LOCAL_PORT</code> on localhost, so that <code>fractal-web</code> can use it from the local machine. Note that the required details for the <code>ssh -L</code> command may be different in each specific case, depending for instance on the <code>fractal-server</code> configuration (e.g the <code>--bind</code> argument of <code>gunicorn</code>), or on whether an additional proxy is needed to reach the remote host.</p>"}]}